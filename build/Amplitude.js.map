{"version":3,"file":"Amplitude.js","sourceRoot":"","sources":["../src/Amplitude.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAExD,OAAO,aAAa,MAAM,iBAAiB,CAAC;AAuE5C,cAAc;AACd;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,eAAe,CAAC,MAAc;IAClD,IAAI,CAAC,aAAa,CAAC,eAAe,EAAE;QAClC,MAAM,IAAI,mBAAmB,CAAC,WAAW,EAAE,iBAAiB,CAAC,CAAC;KAC/D;IACD,OAAO,MAAM,aAAa,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;AACrD,CAAC;AAED,cAAc;AACd;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,cAAc,CAAC,MAAqB;IACxD,IAAI,CAAC,aAAa,CAAC,cAAc,EAAE;QACjC,MAAM,IAAI,mBAAmB,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAAC;KAC9D;IACD,OAAO,MAAM,aAAa,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;AACpD,CAAC;AAED,cAAc;AACd;;;GAGG;AACH,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAAC,cAAmC;IAC9E,IAAI,CAAC,aAAa,CAAC,sBAAsB,EAAE;QACzC,MAAM,IAAI,mBAAmB,CAAC,WAAW,EAAE,wBAAwB,CAAC,CAAC;KACtE;IACD,OAAO,MAAM,aAAa,CAAC,sBAAsB,CAAC,cAAc,CAAC,CAAC;AACpE,CAAC;AAED,cAAc;AACd;;GAEG;AACH,MAAM,CAAC,KAAK,UAAU,wBAAwB;IAC5C,IAAI,CAAC,aAAa,CAAC,wBAAwB,EAAE;QAC3C,MAAM,IAAI,mBAAmB,CAAC,WAAW,EAAE,0BAA0B,CAAC,CAAC;KACxE;IACD,OAAO,MAAM,aAAa,CAAC,wBAAwB,EAAE,CAAC;AACxD,CAAC;AAED,cAAc;AACd;;;;GAIG;AACH,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,SAAiB;IACnD,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE;QAChC,MAAM,IAAI,mBAAmB,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;KAC7D;IACD,OAAO,MAAM,aAAa,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AACtD,CAAC;AAED,cAAc;AACd;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,2BAA2B,CAC/C,SAAiB,EACjB,UAA+B;IAE/B,IAAI,CAAC,aAAa,CAAC,2BAA2B,EAAE;QAC9C,MAAM,IAAI,mBAAmB,CAAC,WAAW,EAAE,6BAA6B,CAAC,CAAC;KAC3E;IACD,OAAO,MAAM,aAAa,CAAC,2BAA2B,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AAChF,CAAC;AAED,cAAc;AACd;;;;;;;;GAQG;AACH,MAAM,CAAC,KAAK,UAAU,aAAa,CAAC,SAAiB,EAAE,UAAoB;IACzE,IAAI,CAAC,aAAa,CAAC,aAAa,EAAE;QAChC,MAAM,IAAI,mBAAmB,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;KAC7D;IACD,OAAO,MAAM,aAAa,CAAC,aAAa,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;AAClE,CAAC;AAED,cAAc;AACd;;;;;;;;;GASG;AACH,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,OAAiC;IAC7E,IAAI,CAAC,aAAa,CAAC,uBAAuB,EAAE;QAC1C,MAAM,IAAI,mBAAmB,CAAC,WAAW,EAAE,yBAAyB,CAAC,CAAC;KACvE;IACD,OAAO,MAAM,aAAa,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;AAC9D,CAAC","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoAmplitude from './ExpoAmplitude';\n\n// @needsAudit @docsMissing\nexport interface AmplitudeTrackingOptions {\n  disableAdid?: boolean;\n  /**\n   * Disable tracking of the device's carrier.\n   */\n  disableCarrier?: boolean;\n  /**\n   * Disable tracking of the user's city.\n   */\n  disableCity?: boolean;\n  /**\n   * Disable tracking of the user's country.\n   */\n  disableCountry?: boolean;\n  /**\n   * Disable tracking of the device brand.\n   */\n  disableDeviceBrand?: boolean;\n  /**\n   * Disable tracking of the device manufacturer.\n   */\n  disableDeviceManufacturer?: boolean;\n  /**\n   * Disable tracking of the device model.\n   */\n  disableDeviceModel?: boolean;\n  /**\n   * Disable tracking of the user's DMA.\n   */\n  disableDMA?: boolean;\n  /**\n   * Disable tracking of the user's IDFV.\n   */\n  disableIDFV?: boolean;\n  /**\n   * Disable tracking of the user's IP address.\n   */\n  disableIPAddress?: boolean;\n  /**\n   * Disable tracking of the device's language.\n   */\n  disableLanguage?: boolean;\n  /**\n   * Disable tracking of the user's current latitude and longitude coordinates.\n   */\n  disableLatLng?: boolean;\n  /**\n   * Disable tracking of the device's OS name.\n   */\n  disableOSName?: boolean;\n  /**\n   * Disable tracking of the device's OS version.\n   */\n  disableOSVersion?: boolean;\n  /**\n   * Disable tracking of the device's platform.\n   */\n  disablePlatform?: boolean;\n  /**\n   * Disable tracking of the user's region.\n   */\n  disableRegion?: boolean;\n  /**\n   * Disable tracking of the app version the user is on for your app.\n   */\n  disableVersionName?: boolean;\n}\n\n// @needsAudit\n/**\n * Initializes Amplitude with your Amplitude API key. If you're having trouble finding your API key,\n * see [step 4 of these instructions](https://amplitude.zendesk.com/hc/en-us/articles/207108137-Introduction-Getting-Started#getting-started).\n * @param apiKey Your Amplitude application's API key.\n */\nexport async function initializeAsync(apiKey: string): Promise<void> {\n  if (!ExpoAmplitude.initializeAsync) {\n    throw new UnavailabilityError('Amplitude', 'initializeAsync');\n  }\n  return await ExpoAmplitude.initializeAsync(apiKey);\n}\n\n// @needsAudit\n/**\n * Assign a user ID to the current user. If you don't have a system for user IDs you don't need to\n * call this. See [this page](https://amplitude.zendesk.com/hc/en-us/articles/206404628-Step-2-Assign-User-IDs-and-Identify-your-Users)\n * for details.\n * @param userId User ID for the current user. Can be set to `null` (e.g. when the user is logging out).\n */\nexport async function setUserIdAsync(userId: string | null): Promise<void> {\n  if (!ExpoAmplitude.setUserIdAsync) {\n    throw new UnavailabilityError('Amplitude', 'setUserIdAsync');\n  }\n  return await ExpoAmplitude.setUserIdAsync(userId);\n}\n\n// @needsAudit\n/**\n * Set properties for the current user. See [here for details](https://amplitude.zendesk.com/hc/en-us/articles/207108327-Step-4-Set-User-Properties-and-Event-Properties).\n * @param userProperties A map of custom properties.\n */\nexport async function setUserPropertiesAsync(userProperties: Record<string, any>): Promise<void> {\n  if (!ExpoAmplitude.setUserPropertiesAsync) {\n    throw new UnavailabilityError('Amplitude', 'setUserPropertiesAsync');\n  }\n  return await ExpoAmplitude.setUserPropertiesAsync(userProperties);\n}\n\n// @needsAudit\n/**\n * Clear properties set by [`setUserPropertiesAsync()`](#amplitudesetuserpropertiesasyncuserproperties).\n */\nexport async function clearUserPropertiesAsync(): Promise<void> {\n  if (!ExpoAmplitude.clearUserPropertiesAsync) {\n    throw new UnavailabilityError('Amplitude', 'clearUserPropertiesAsync');\n  }\n  return await ExpoAmplitude.clearUserPropertiesAsync();\n}\n\n// @needsAudit\n/**\n * Log an event to Amplitude. For more information about what kind of events to track,\n * [see here](https://amplitude.zendesk.com/hc/en-us/articles/206404698-Step-3-Track-Events-and-Understand-the-Actions-Users-Take).\n * @param eventName The event name.\n */\nexport async function logEventAsync(eventName: string): Promise<void> {\n  if (!ExpoAmplitude.logEventAsync) {\n    throw new UnavailabilityError('Amplitude', 'logEventAsync');\n  }\n  return await ExpoAmplitude.logEventAsync(eventName);\n}\n\n// @needsAudit\n/**\n * Log an event to Amplitude with custom properties. For more information about what kind of events\n * to track, [see here](https://amplitude.zendesk.com/hc/en-us/articles/206404698-Step-3-Track-Events-and-Understand-the-Actions-Users-Take).\n * @param eventName The event name.\n * @param properties A map of custom properties.\n */\nexport async function logEventWithPropertiesAsync(\n  eventName: string,\n  properties: Record<string, any>\n): Promise<void> {\n  if (!ExpoAmplitude.logEventWithPropertiesAsync) {\n    throw new UnavailabilityError('Amplitude', 'logEventWithPropertiesAsync');\n  }\n  return await ExpoAmplitude.logEventWithPropertiesAsync(eventName, properties);\n}\n\n// @needsAudit\n/**\n * Add the current user to a group. For more information, see here for [iOS](https://github.com/amplitude/Amplitude-iOS#setting-groups)\n * and see here for [Android](https://github.com/amplitude/Amplitude-Android#setting-groups).\n * @param groupType The group name, e.g. \"sports\".\n * @param groupNames An array of group names, e.g. [\"tennis\", \"soccer\"].\n * > **Note:** The iOS and Android Amplitude SDKs allow you to use a string or an array of strings. We\n * only support an array of strings. Just use an array with one element if you only want one group\n * name.\n */\nexport async function setGroupAsync(groupType: string, groupNames: string[]): Promise<void> {\n  if (!ExpoAmplitude.setGroupAsync) {\n    throw new UnavailabilityError('Amplitude', 'setGroupAsync');\n  }\n  return await ExpoAmplitude.setGroupAsync(groupType, groupNames);\n}\n\n// @needsAudit\n/**\n * By default, the Amplitude SDK will track several user properties such as carrier and city. You\n * can use this method to customize and disable individual fields.\n * > **Note:** These configurations will prevent default properties from being tracked on newly\n * created projects, where data has not yet been sent. Please contact [platform@amplitude.com](mailto:platform@amplitude.com)\n * if you would like default properties blocked (moving forward) on projects with existing data.\n * @param options Options object for what should not be tracked. The table below describes what\n * properties the object may contain. All properties are expected to be booleans. For example,\n * passing `disableCarrier: true` disables tracking the device's carrier.\n */\nexport async function setTrackingOptionsAsync(options: AmplitudeTrackingOptions): Promise<void> {\n  if (!ExpoAmplitude.setTrackingOptionsAsync) {\n    throw new UnavailabilityError('Amplitude', 'setTrackingOptionsAsync');\n  }\n  return await ExpoAmplitude.setTrackingOptionsAsync(options);\n}\n"]}